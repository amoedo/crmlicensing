// <copyright file="PreAccountCreate.cs" company="">
// Copyright (c) 2013 All Rights Reserved
// </copyright>
// <author></author>
// <date>2/1/2013 6:02:44 PM</date>
// <summary>Implements the PreAccountCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace CrmLicensing.CrmPackageByWall.Plugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using CrmLicensing.CrmPackageByWall.Plugins.eu.europa.ec;

    /// <summary>
    /// PreAccountCreate Plugin.
    /// </summary>    
    public class PreAccountCreate : LicensedPlugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreAccountCreate"/> class.
        /// </summary>
        public PreAccountCreate()
            : base(typeof(PreAccountCreate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(20, "Create", "account", new Action<LocalPluginContext>(ExecutePreAccountCreate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePreAccountCreate(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }


            localContext.Trace("Checking Input Parameters");
            // Check the parameters

            Entity target = (Entity)localContext.PluginExecutionContext.InputParameters["Target"];

            if (!target.Contains("clbw_vatnumber"))
            {
                localContext.Trace("No VAT number found");
                foreach (var item in target.Attributes)
                {
                    if (item.Value != null)
                        localContext.Trace(string.Format("{0}={1}", item.Key, item.Value.ToString()));
                }
                return;
            }

            DoLicenseCheck(localContext); //License Check


            localContext.Trace("Retrieving VAT id from params");
            string vat = (string)target["clbw_vatnumber"];
            localContext.Trace(string.Format("VAT Id is {0}", vat));

            localContext.Trace("calling web service");

            checkVatService svc = new checkVatService();
            svc.Url = "http://ec.europa.eu/taxation_customs/vies/services/checkVatService";
            bool result;

            string country = vat.Substring(0, 2);
            vat = vat.Substring(2);

            string name, address;
            try
            {
                svc.checkVat(ref country, ref vat, out result, out name, out address);
            }
            catch (Exception e)
            {
                localContext.Trace(string.Format("Exception when retrieve VAT Check {0}", e.Message));
                throw new InvalidPluginExecutionException("Error checking VAT number, make sure the format is correct with the country code at the begining or try again later", e);
            }

            localContext.Trace("Web Service Call returned");
            localContext.Trace(string.Format("Result is {0}", result.ToString()));

            if (result)
            {
                target["clbw_valideuvat"] = true;
                localContext.Trace("Value set to valid");

                if (!string.IsNullOrEmpty(address))
                {
                    string[] parts = address.Split(new char[] { '\n' }, 4, StringSplitOptions.RemoveEmptyEntries);
                    if (parts.Length > 0) target["address1_line1"] = parts[0];
                    if (parts.Length > 1) target["address1_city"] = parts[1];
                    if (parts.Length > 2) target["address1_county"] = parts[2];
                    if (parts.Length > 3) target["address1_postalcode"] = parts[3];
                }
            }
            else
            {
                target["clbw_validvat"] = false;
                localContext.Trace("Value set to not valid");

            }
        }

    }
}
